// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.11;

// libraries
import "./external/@openzeppelin/token/ERC20/utils/SafeERC20.sol";
import "./external/@openzeppelin/utils/SafeCast.sol";

// extends
import "./interfaces/IFeeHandler.sol";
import "./shared/SpoolOwnable.sol";
import "./shared/Constants.sol";

// other imports
import "./interfaces/IController.sol";

struct PlatformCollectedFees {
    uint128 ecosystem;
    uint128 treasury;
}

/**
 * @notice Implementation of the {IFeeHandler} interface.
 *
 * @dev
 * Handles fees generated by vaults.
 * Fees are only collected when a user withdraws and calculated
 * from the generated profit (performance fees).
 *
 * There are 4 type of fees:
 * - Ecosystem fee: Circle back in Spool ecosystem and is distributed to Spool system participants
 * - Treasury fee: Collected by the Spool DAO to support the development of the Spool
 * - Risk provider fee: Collected the risk provider the vault is using to allocate it's funds
 * - Vault owner fee: Collected by the vault owner (initially the vault creator, later can be transferred to another address)
 */
contract FeeHandler is IFeeHandler, SpoolOwnable, BaseConstants {
    using SafeERC20 for IERC20;

    /* ========== CONSTANTS ========== */

    /// @notice Maximum Ecosystem Fee (20%) 
    uint256 public constant MAX_ECOSYSTEM_FEE = 20_00;
    /// @notice Max Treasury Fee (10%)
    uint256 public constant MAX_TREASURY_FEE = 10_00; 
    /// @notice Max Risk Provider Fee (5%)
    uint256 public constant MAX_RISK_PROVIDER_FEE = 5_00;

    /* ========== STATE VARIABLES ========== */

    /// @notice controller contract
    IController public immutable controller;
    /// @notice risk provider registry contract
    address public immutable riskProviderRegistry;

    /// @notice Current Ecosystem Fee
    uint16 public ecosystemFee;
    /// @notice Current Treasury Fee
    uint16 public treasuryFee;
    /// @notice Current Ecosystem Fee to the collector
    address public ecosystemFeeCollector;
    /// @notice Current Treasury Fee to the collector
    address public treasuryFeeCollector;


    /// @notice ecosystem and treasury collected fees
    mapping(IERC20 => PlatformCollectedFees) public platformCollectedFees;

    /// @notice Risk provider fee size
    mapping(address => uint16) public riskProviderFees;

    /// @notice risk provider and vault owner collected fees
    mapping(address => mapping(IERC20 => uint256)) public collectedFees;

    /* ========== CONSTRUCTOR ========== */

    /**
     * @notice Sets the contract initial values
     *
     * @dev It performs certain pre-conditional validations to ensure the contract
     * has been initialized properly, such as that addresses are valid.
     *
     * @param _spoolOwner the spool owner contract that owns this contract
     * @param _controller responsible for creating new vaults
     * @param _riskProviderRegistry responsible for handling risk providers
     * @param _ecosystemFee fee to ecosystem
     * @param _treasuryFee fee to treasury
     * @param _ecosystemFeeCollector address of ecosystem fee collector
     * @param _treasuryFeeCollector address of treasury fee collector
     */
    constructor(
        ISpoolOwner _spoolOwner,
        IController _controller,
        address _riskProviderRegistry,
        uint16 _ecosystemFee,
        uint16 _treasuryFee,
        address _ecosystemFeeCollector,
        address _treasuryFeeCollector
    )
        SpoolOwnable(_spoolOwner)
    {
        require(address(_controller) != address(0), "FeeHandler::constructor: Controller address cannot be 0");
        require(_riskProviderRegistry != address(0), "FeeHandler::constructor: Risk Provider Registry address cannot be 0");
        require(_ecosystemFeeCollector != address(0), "FeeHandler::constructor: Ecosystem Fee Collector cannot be 0");
        require(_treasuryFeeCollector != address(0), "FeeHandler::constructor: Treasury Fee Collector address cannot be 0");

        controller = _controller;
        riskProviderRegistry = _riskProviderRegistry;

        _setEcosystemFee(_ecosystemFee);
        _setTreasuryFee(_treasuryFee);

        _setEcosystemCollector(_ecosystemFeeCollector);
        _setTreasuryCollector(_treasuryFeeCollector);
    }

    /* ========== MUTATIVE FUNCTIONS ========== */

    /**
     * @notice Collect vault owner and risk provider fees
     *
     * @dev
     * transfers any fees collected for the sender to them.
     * fees are only collected for the vault owner and risk providers. if it's called by
     * anyone else it will have no effect.
     *
     * NOTE To save on storage fees, we use the value stored at collectedFees as a kind of boolean.
     * if there are fees to be collected (value > 1), we send the fees to the user, and then set the word
     * as 1. the value must be greater than this to send fees again. Therefore only the first SSTORE is 20k
     * and subsequent writes are 5k.
     *
     * @param tokens token addresses for which fees have been collected in
     */
    function collectFees(IERC20[] calldata tokens) external {
        for (uint256 i = 0; i < tokens.length; i++) {
            uint256 amount = collectedFees[msg.sender][tokens[i]];
            if (amount > 1) {
                amount--;
                collectedFees[msg.sender][tokens[i]] = 1;
                tokens[i].safeTransfer(msg.sender, amount);

                emit FeeCollected(msg.sender, tokens[i], amount);
            }
        }
    }

    /**
     * @notice Collect ecosystem fees
     *
     * transfers any fees collected for the ecosystem fee collecter to them.
     * callable by anyone, but only transfers to ecosystem fee collector address.
     * see NOTE in {collectFees} for more details on internal logic.
     * Requirements:
     * - Caller address must be equal to ecosystem fee collector     *
     *
     * @param tokens token addresses for which fees have been collected in
     */
    function collectEcosystemFees(IERC20[] calldata tokens) external {
        require(
            ecosystemFeeCollector == msg.sender,
            "FeeHandler::collectEcosystemFees: Caller not ecosystem fee collector."
        );

        for (uint256 i = 0; i < tokens.length; i++) {
            uint128 amount = platformCollectedFees[tokens[i]].ecosystem;
            if (amount > 1) {
                amount--;
                platformCollectedFees[tokens[i]].ecosystem = 1;
                tokens[i].safeTransfer(msg.sender, amount);

                emit EcosystemFeeCollected(tokens[i], amount);
            }
        }
    }

    /**
     * @notice Collect treasury fees
     *
     * transfers any fees collected for the treasury fee collecter to them.
     * see NOTE in {collectFees} for more details on internal logic.
     * Requirements:
     * - Caller address must be equal to treasury fee collector
     *
     * @param tokens token addresses for which fees have been collected in
     */    
    function collectTreasuryFees(IERC20[] calldata tokens) external {
        require(
            treasuryFeeCollector == msg.sender,
            "FeeHandler::collectTreasuryFees: Caller not treasury fee collector."
        );

        for (uint256 i = 0; i < tokens.length; i++) {
            uint128 amount = platformCollectedFees[tokens[i]].treasury;
            if (amount > 1) {
                amount--;
                platformCollectedFees[tokens[i]].treasury = 1;
                tokens[i].safeTransfer(msg.sender, amount);

                emit TreasuryFeeCollected(tokens[i], amount);
            }
        }
    }

    /* ========== RESTRICTED FUNCTIONS ========== */

    /**
     * @notice Pay vault fees to ecosystem, treasury, risk provider and vault owner.
     * @dev
     * Returns total fee size, that is later transfered by vault to this contract.
     *
     * Requirements:
     * - caller must be a vault
     *
     * @param underlying token address for which fees are to be paid
     * @param profit User realized profit
     * @param riskProvider address of the risk provider for which fees are to be paid
     * @param vaultOwner address of the owner of the calling vault, recipient of the vault fees
     * @param vaultFee fee to owner in the calling vault
     *
     * @return feesPaid total calculated fees paid from the user profit
     */
    function payFees(
        IERC20 underlying,
        uint256 profit,
        address riskProvider,
        address vaultOwner,
        uint16 vaultFee
    ) 
        external
        override
        onlyVault
        returns (uint256 feesPaid)
    {
        // ecosystem
        uint128 ecosystemCollected = _calculateFee(profit, ecosystemFee);
        if (ecosystemCollected > 0) {
            platformCollectedFees[underlying].ecosystem += ecosystemCollected;
            feesPaid += ecosystemCollected;
        }

        // treasury
        uint128 treasuryCollected = _calculateFee(profit, treasuryFee);
        if (treasuryCollected > 0) {
            platformCollectedFees[underlying].treasury += treasuryCollected;
            feesPaid += treasuryCollected;
        }

        // risk provider
        uint16 riskProviderFee = riskProviderFees[riskProvider];
        uint128 riskProviderColected = _calculateFee(profit, riskProviderFee);
        if (riskProviderColected > 0) {
            collectedFees[riskProvider][underlying] += riskProviderColected;
            feesPaid += riskProviderColected;
        }

        // vault owner
        uint128 vaultFeeCollected = _calculateFee(profit, vaultFee);
        if (vaultFeeCollected > 0) {
            collectedFees[vaultOwner][underlying] += riskProviderColected;
            feesPaid += vaultFeeCollected;
        }

        emit FeesPaid(msg.sender, profit, ecosystemCollected, treasuryCollected, riskProviderColected, vaultFeeCollected);
    }

    /**
     * @notice Set risk provider fee size
     *
     * @dev
     * Requirements:
     *
     * - caller must be the risk provider registry
     *
     * @param riskProvider address to risk provider to set fee for
     * @param fee fee to set for the risk provider
     */
    function setRiskProviderFee(address riskProvider, uint16 fee) external override onlyRiskProviderRegistry {
        _setRiskProviderFee(riskProvider, fee);
    }

    /**
     * @notice Set ecosystem fee size
     *
     * @dev
     * Requirements:
     *
     * - caller must be the spool owner
     *
     * @param fee ecosystem fee to set
     */
    function setEcosystemFee(uint16 fee) external onlyOwner {
        _setEcosystemFee(fee);
    }

    /**
     * @notice Set treasury fee size
     *
     * @dev
     * Requirements:
     *
     * - caller must be the spool owner
     *
     * @param fee treasury fee to set
     */
    function setTreasuryFee(uint16 fee) external onlyOwner {
        _setTreasuryFee(fee);
    }
    
    /**
     * @notice Set ecosystem fee collector address
     *
     * @dev
     * Requirements:
     * - caller must be the spool owner
     *
     * @param collector ecosystem fee collector address to set
     */
    function setEcosystemCollector(address collector) external onlyOwner {
        _setEcosystemCollector(collector);
    }

    /**
     * @notice Set treasiry fee collector address
     *
     * @dev
     * Requirements:
     * - caller must be the spool owner
     *
     * @param collector treasiry fee collector address to set
     */
    function setTreasuryCollector(address collector) external onlyOwner {
        _setTreasuryCollector(collector);
    }

    /* ========== PRIVATE FUNCTIONS ========== */

    /**
     * @notice calculate fee from profit and size of fee
     * @dev fee is denoted in basis points, `FULL_PERCENT` being 10,000 or 100%
     *
     * @param profit user profit amount
     * @param feeSize fee size in basis points
     * @return feeAmount Fee amount calculated from the `profit`
     */
    function _calculateFee(uint256 profit, uint16 feeSize) private pure returns(uint128) {
        return SafeCast.toUint128((profit * feeSize) / FULL_PERCENT);
    }

    /**
     * @notice Set risk provider fee size
     *
     * @dev
     * Requirements:
     *
     * - fee must be less than or equal to the max risk provider fee
     *
     * @param riskProvider address to risk provider to set fee for
     * @param fee fee to set for the risk provider
     */
    function _setRiskProviderFee(address riskProvider, uint16 fee) private {
        require(fee <= MAX_RISK_PROVIDER_FEE, "FeeHandler::_setRiskProviderFee: Risk Provider fee too big");
        riskProviderFees[riskProvider] = fee;
        emit RiskProviderFeeUpdated(riskProvider, fee);
    }

    /**
     * @notice Set ecosystem fee size
     *
     * @dev
     * Requirements:
     *
     * - fee must be less than or equal to the max ecosystem fee
     *
     * @param fee ecosystem fee to set
     */    
     function _setEcosystemFee(uint16 fee) private {
        require(fee <= MAX_ECOSYSTEM_FEE, "FeeHandler::_setEcosystemFee: Ecosystem fee too big");
        ecosystemFee = fee;
        emit EcosystemFeeUpdated(fee);
    }

    /**
     * @notice Set treasury fee size
     *
     * @dev
     * Requirements:
     *
     * - fee must be less than or equal to the max treasury fee
     *
     * @param fee treasury fee to set
     */
    function _setTreasuryFee(uint16 fee) private {
        require(fee <= MAX_TREASURY_FEE, "FeeHandler::_setTreasuryFee: Treasury fee too big");
        treasuryFee = fee;
        emit TreasuryFeeUpdated(fee);
    }

    /**
     * @notice Set ecosystem fee collector address
     *
     * @dev
     * Requirements:
     * - collector cannot be 0
     *
     * @param collector ecosystem fee collector address to set
     */
    function _setEcosystemCollector(address collector) private {
        require(collector != address(0), "FeeHandler::_setEcosystemCollector: Ecosystem Fee Collector address cannot be 0");
        ecosystemFeeCollector = collector;
        emit EcosystemCollectorUpdated(collector);
    }

    /**
     * @notice Set treasiry fee collector address
     *
     * @dev
     * Requirements:
     - collector cannot be 0
     *
     * @param collector treasiry fee collector address to set
     */    
    function _setTreasuryCollector(address collector) private {
        require(collector != address(0), "FeeHandler::_setTreasuryCollector: Treasury Fee Collector address cannot be 0");
        treasuryFeeCollector = collector;
        emit TreasuryCollectorUpdated(collector);
    }

    /**
     * @notice Ensures that the caller is a valid vault
     *
     * @dev
     * callable only from the onlyVault modifier
     */
    function _onlyVault() private view {
        require(
            controller.validVault(msg.sender),
            "FeeHandler::_onlyVault: Can only be invoked by the Vault"
        );
    }

    /**
     * @notice Ensures that the caller is a risk provider registry
     *
     * @dev
     * Requirements:
     * - caller is the risk provider registry
     */
    function _onlyRiskProviderRegistry() private view {
        require(
            riskProviderRegistry == msg.sender,
            "FeeHandler::_onlyRiskProviderRegistry: Can only be invoked by the Risk Provider Registry"
        );
    }

    /* ========== MODIFIERS ========== */

    /**
     * @notice onlyVault modifier
     *
     * @dev 
     * Throws if called by a non-valid vault
     */
    modifier onlyVault() {
        _onlyVault();
        _;
    }

    /**
     * @notice onlyRiskProviderRegistry modifier
     *
     * @dev 
     * Throws if called by any address other than the risk provider registry
     */
    modifier onlyRiskProviderRegistry() {
        _onlyRiskProviderRegistry();
        _;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
 * checks.
 *
 * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can
 * easily result in undesired exploitation or bugs, since developers usually
 * assume that overflows raise errors. `SafeCast` restores this intuition by
 * reverting the transaction when such an operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 *
 * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing
 * all math on `uint256` and `int256` and then downcasting.
 */
library SafeCast {
    /**
     * @dev Returns the downcasted uint224 from uint256, reverting on
     * overflow (when the input is greater than largest uint224).
     *
     * Counterpart to Solidity's `uint224` operator.
     *
     * Requirements:
     *
     * - input must fit into 224 bits
     */
    function toUint224(uint256 value) internal pure returns (uint224) {
        require(value <= type(uint224).max, "SafeCast: value doesn't fit in 224 bits");
        return uint224(value);
    }

    /**
     * @dev Returns the downcasted uint192 from uint256, reverting on
     * overflow (when the input is greater than largest uint192).
     *
     * Counterpart to Solidity's `uint192` operator.
     *
     * Requirements:
     *
     * - input must fit into 192 bits
     */
    function toUint192(uint256 value) internal pure returns (uint192) {
        require(value <= type(uint192).max, "SafeCast: value doesn't fit in 128 bits");
        return uint192(value);
    }

    /**
     * @dev Returns the downcasted uint128 from uint256, reverting on
     * overflow (when the input is greater than largest uint128).
     *
     * Counterpart to Solidity's `uint128` operator.
     *
     * Requirements:
     *
     * - input must fit into 128 bits
     */
    function toUint128(uint256 value) internal pure returns (uint128) {
        require(value <= type(uint128).max, "SafeCast: value doesn't fit in 128 bits");
        return uint128(value);
    }
}

// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.11;

import "../external/@openzeppelin/token/ERC20/IERC20.sol";

interface IController {
    /* ========== FUNCTIONS ========== */

    function strategies(uint256 i) external view returns (address);

    function validStrategy(address strategy) external view returns (bool);

    function validVault(address vault) external view returns (bool);

    function getStrategiesCount() external view returns(uint8);

    function supportedUnderlying(IERC20 underlying)
        external
        view
        returns (bool);

    function getAllStrategies() external view returns (address[] memory);

    function verifyStrategies(address[] calldata _strategies) external view;

    function transferToSpool(
        address transferFrom,
        uint256 amount
    ) external;

    function checkPaused() external view;

    /* ========== EVENTS ========== */

    event EmergencyWithdrawStrategy(address indexed strategy);
    event EmergencyRecipientUpdated(address indexed recipient);
    event EmergencyWithdrawerUpdated(address indexed withdrawer, bool set);
    event PauserUpdated(address indexed user, bool set);
    event UnpauserUpdated(address indexed user, bool set);
    event VaultCreated(address indexed vault, address underlying, address[] strategies, uint256[] proportions,
        uint16 vaultFee, address riskProvider, int8 riskTolerance);
    event StrategyAdded(address strategy);
    event StrategyRemoved(address strategy);
    event VaultInvalid(address vault);
    event DisableStrategy(address strategy);
}

// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.11;

import "../external/@openzeppelin/token/ERC20/IERC20.sol";

interface IFeeHandler {
    function payFees(
        IERC20 underlying,
        uint256 profit,
        address riskProvider,
        address vaultOwner,
        uint16 vaultFee
    ) external returns (uint256 feesPaid);

    function setRiskProviderFee(address riskProvider, uint16 fee) external;

    /* ========== EVENTS ========== */

    event FeesPaid(address indexed vault, uint profit, uint ecosystemCollected, uint treasuryCollected, uint riskProviderColected, uint vaultFeeCollected);
    event RiskProviderFeeUpdated(address indexed riskProvider, uint indexed fee);
    event EcosystemFeeUpdated(uint indexed fee);
    event TreasuryFeeUpdated(uint indexed fee);
    event EcosystemCollectorUpdated(address indexed collector);
    event TreasuryCollectorUpdated(address indexed collector);
    event FeeCollected(address indexed collector, IERC20 indexed underlying, uint amount);
    event EcosystemFeeCollected(IERC20 indexed underlying, uint amount);
    event TreasuryFeeCollected(IERC20 indexed underlying, uint amount);
}

// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.11;

interface ISpoolOwner {
    function isSpoolOwner(address user) external view returns(bool);
}

// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.11;

import "../external/@openzeppelin/token/ERC20/IERC20.sol";

/// @title Common Spool contracts constants
abstract contract BaseConstants {
    /// @dev 2 digits precision
    uint256 internal constant FULL_PERCENT = 100_00;

    /// @dev Accuracy when doing shares arithmetics
    uint256 internal constant ACCURACY = 10**30;
}

/// @title Contains USDC token related values
abstract contract USDC {
    /// @notice USDC token contract address
    IERC20 internal constant USDC_ADDRESS = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
}

// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.11;

import "../interfaces/ISpoolOwner.sol";

/// @title Logic to help check whether the caller is the Spool owner
abstract contract SpoolOwnable {
    /// @notice Contract that checks if address is Spool owner
    ISpoolOwner internal immutable spoolOwner;

    /**
     * @notice Sets correct initial values
     * @param _spoolOwner Spool owner contract address
     */
    constructor(ISpoolOwner _spoolOwner) {
        require(
            address(_spoolOwner) != address(0),
            "SpoolOwnable::constructor: Spool owner contract address cannot be 0"
        );

        spoolOwner = _spoolOwner;
    }

    /**
     * @notice Checks if caller is Spool owner
     * @return True if caller is Spool owner, false otherwise
     */
    function isSpoolOwner() internal view returns(bool) {
        return spoolOwner.isSpoolOwner(msg.sender);
    }


    /// @notice Checks and throws if caller is not Spool owner
    function _onlyOwner() private view {
        require(isSpoolOwner(), "SpoolOwnable::onlyOwner: Caller is not the Spool owner");
    }

    /// @notice Checks and throws if caller is not Spool owner
    modifier onlyOwner() {
        _onlyOwner();
        _;
    }
}